package {{invokerPackage}};

import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashMap;

public class EnumTypeAdapterFactory implements TypeAdapterFactory {
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
        Class<T> rawType = (Class<T>) type.getRawType();
        if (!rawType.isEnum()) {
            return null;
        }

        return new EnumTypeAdapter<T>(type);
    }

    private static class EnumTypeAdapter<T> extends TypeAdapter<T> {
        private final TypeToken<?> type;
        private final HashMap<String, T> constants;

        public EnumTypeAdapter(TypeToken<T> type) {
            constants = new HashMap<>();
            for (Object constant : type.getRawType().getEnumConstants()) {
                constants.put(constant.toString(), (T)constant);
            }

            this.type = type;
        }

        public void write(JsonWriter out, T value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(value.toString());
            }
        }

        public T read(JsonReader reader) throws IOException {
            if (reader.peek() == JsonToken.NULL) {
                reader.nextNull();
                return null;
            } else {
                return constants.get(reader.nextString());
            }
        }
    }
}