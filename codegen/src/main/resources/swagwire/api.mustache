package {{package}};

import {{modelPackage}}.*;

import java.time.*;
import net.dongliu.gson.GsonJava8TypeAdapterFactory;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

{{^fullJavaUtil}}
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
{{/fullJavaUtil}}

import com.masabi.swagwire.core.*;
import static com.masabi.swagwire.core.ApiUtils.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.matching.ContentPattern;

{{#operations}}
    public class {{classname}} {
        private SwagwiredServiceConfiguration configuration;

        public {{classname}}() {
            this(SwagwiredServiceConfiguration.builder().build());
        }

        public {{classname}}(SwagwiredServiceConfiguration configuration) {
            this.configuration = configuration;
        }

        public {{classname}}(Gson gson) {
            this.configuration = SwagwiredServiceConfiguration.builder().gson(gson).build();
        }

    {{#operation}}
        {{#bodyParam}}
        // do the passthrough ere
        public {{#returnType}}RemoteOperation<{{{returnType}}}> {{/returnType}}{{^returnType}}RemoteOperation<Void> {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
            return {{operationId}}({{#allParams}}{{#isBodyParam}}WireMock.equalToJson(configuration.getGson().toJson({{paramName}}), false, false){{/isBodyParam}}{{^isBodyParam}}{{paramName}}{{/isBodyParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        }
        {{/bodyParam}}

        /**
        * {{summary}}
        * {{notes}}
        {{#allParams}}
            * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
        {{/allParams}}
        {{#returnType}}
            * @return {{returnType}}
        {{/returnType}}
        * @throws ApiException if fails to make API call
        {{#isDeprecated}}
            * @Deprecated
        {{/isDeprecated}}
        {{#externalDocs}}
            * {{description}}
            * @see <a href="{{url}}">{{summary}} Documentation</a>
        {{/externalDocs}}
        */

        //
        //
        // I bet the final comma before the body on this doesn't work when there's only a single argument
        //
        // We should have tests or something for that


        public {{#returnType}}RemoteOperation<{{{returnType}}}> {{/returnType}}{{^returnType}}RemoteOperation<Void> {{/returnType}}{{operationId}}({{#allParams}}{{^isBodyParam}}{{{dataType}}}{{/isBodyParam}}{{#isBodyParam}}ContentPattern<String>{{/isBodyParam}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
        {{#allParams}}{{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null) {
            throw new IllegalArgumentException("Missing the required parameter '{{paramName}}' when calling {{operationId}}");
            }
        {{/required}}{{/allParams}}
        // create path and map variables


        String {{localVariablePrefix}}localVarPath = configuration.getBasePath() + "{{{path}}}"{{#pathParams}}
            .replaceAll("\\{" + "{{baseName}}" + "\\}", {{localVariablePrefix}}{{{paramName}}}.toString()){{/pathParams}};

        final String[] {{localVariablePrefix}}localVarAccepts = {
            {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
        };
/*
        final String {{localVariablePrefix}}localVarAccept = {{localVariablePrefix}}selectHeaderAccept({{localVariablePrefix}}localVarAccepts);

        // query params
        {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
        {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarCollectionQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
        {{javaUtilPrefix}}Map<String, String> {{localVariablePrefix}}localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();
        {{javaUtilPrefix}}Map<String, Object> {{localVariablePrefix}}localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();

        {{#queryParams}}
            {{localVariablePrefix}}{{#collectionFormat}}localVarCollectionQueryParams.addAll({{localVariablePrefix}}apiClient.parameterToPairs("{{{collectionFormat}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll({{localVariablePrefix}}apiClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
        {{/queryParams}}

        {{#formParams}}if ({{paramName}} != null)
        {{localVariablePrefix}}localVarFormParams.put("{{baseName}}", {{paramName}});
        {{/formParams}}


            final String[] {{localVariablePrefix}}localVarContentTypes = {
        {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}
            };
            final String {{localVariablePrefix}}localVarContentType = {{localVariablePrefix}}apiClient.selectHeaderContentType({{localVariablePrefix}}localVarContentTypes);

            String[] {{localVariablePrefix}}localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

        {{#returnType}}
                GenericType<{{{returnType}}}> {{localVariablePrefix}}localVarReturnType = new GenericType<{{{returnType}}}>() {};
                return {{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarCollectionQueryParams, {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAccept, {{localVariablePrefix}}localVarContentType, {{localVariablePrefix}}localVarAuthNames, {{localVariablePrefix}}localVarReturnType);
        {{/returnType}}
        {{^returnType}}
            {{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarCollectionQueryParams, {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAccept, {{localVariablePrefix}}localVarContentType, {{localVariablePrefix}}localVarAuthNames, null);
        {{/returnType}}*/

        // TODO this only works for Json right now - to do something else we need
        // to handle the serialization further down

        // These are inverted from the normal generation meaning as when programming
        // wiremock we're doing the inverse
        final String contentType = selectHeaderAccept(localVarAccepts);

        /**
         * This is probably going to be different depending on the operation being done -
         * maybe use the HTTP verb to figure it out
         */
        MappingBuilder mappingBuilder = WireMock.request("{{httpMethod}}", WireMock.urlPathMatching(localVarPath));
        {{#headerParams}}if ({{paramName}} != null) {
            mappingBuilder
                .withHeader("{{baseName}}", WireMock.equalTo(parameterToString({{paramName}})));
        }
        {{/headerParams}}
        {{#bodyParam}}
            mappingBuilder.withRequestBody(body);
        {{/bodyParam}}

            return new RemoteOperation<>(mappingBuilder, configuration.getGson(), contentType, configuration.getWireMock());
        }
    {{/operation}}
{{/operations}}
}